@ArrayErr0.Ya; // Arrays: `item[], `item[^], `item[=], `item[+]
// 13 Nov, Aug-Mar

\%requ `=
	``* ``* a = ``* b
\%requ `== 
	`Bool ``* a == ``* b
	`Bool ``* a != ``* b
		Return !! a == b; // for != here is also the implementation. Really it's need to require that the implementation is the same as here defined, but probably it's not that good. Open question.

\`item : %requ `= `==; // this should be read so: type `item must be so that it satisfies requirements for `= and `==

// below: signs after `item is 1 lexema, i.e. [] [^] [=] [+] are lexemas, not groups of lexemas
\`item[]; // [] - cut of another array. Array
\`item[^]; // [^] - allocated array with no length change. Move on =. ArrayR
\`item[=]; // [=] - allocated array with no length change. Copy on =. ArrayL
\`item[+]; // [+] - full-featured array with length change support. ArrayA

`No(`item[]* ar) ArrayItemsDestroy
`No(`No^* area) MemFree
`No(`Char[]* dest, `Char-[]-* src) ArrayCAllocCopy; // free dest before it used

\`item[] // cut of another array. no alloc-dealloc
	`Char[]*() b
		Return _ `Char[]*
	`item* Min, Max

`Int+(`item-[]-* _) Size
	Return Max `Char* - Min `Char*
`Int+(`item-[]-* _) Length
	Return Max - Min

\`item[^]
	`item[] __ C

	`No(`item[]-* src) AllocCopy
		ArrayCAllocCopy(b(), src.b())
	`Make(`item[^]-* s) Move
		ArrayCAllocCopy(b(), s.b())
	`Make(`item[+]-* s) Move
		ArrayAShrinkMove(b(), s `Char[+])
	`item[^]* = `item[=]-* s
		ArrayCAllocCopy(b(), s.b()); ;Return _
	`item[^]* = `item[+]* s
		ArrayAShrinkMove(b(), s `Char[+]*); ;Return _

\`item[=]
	`item[^] __ R

`No(`Char[+]* a, `Int+ newAlloSize) ArrayARealloc
`No(`Char[+]* a, `Int+ newSize, `Int+ itemSize) ArrayASetSize
`Char*(`Char[+]* a, `Int+ deltaSize, `Int+ itemSize) ArrayAChange
`Bool(`Char[+]-* a) ArrayAIsMaxFull
`No(`Char[]* dest, `Char[+]* src) ArrayAShrinkMove
`No(`Char[+]* dest, `Char[+]* src) ArrayAMove
`No(`Char[]* dest, `Char[]* src) ArrayAAdd

\`item[+]
	`item[=] __ L
	`item* End; // end of allocated area; please don't change
	// if End == 0 then the data in array is not owned by it, and should not be freed on destr
