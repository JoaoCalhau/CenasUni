import java.io.*;
import java.util.*;

public class decode {
	static int errors = 0;
	
	public static String read(String in) {
		try(BufferedReader br = new BufferedReader(new FileReader(in))) {

			String s = br.readLine();

			return s;

		} catch(IOException e) {
			System.out.println("Inexsistant file...");
		}
		return null;
	}
	
	public static String hammingDecode(String in) {
		StringBuffer out = new StringBuffer();
		
		for(int i = 0; i < in.length(); i+=7) {
			int data1 = Character.getNumericValue(in.charAt(i));
			int data2 = Character.getNumericValue(in.charAt(i+1));
			int data3 = Character.getNumericValue(in.charAt(i+2));
			int data4 = Character.getNumericValue(in.charAt(i+3));
			int data5 = Character.getNumericValue(in.charAt(i+4));
			int data6 = Character.getNumericValue(in.charAt(i+5));
			int data7 = Character.getNumericValue(in.charAt(i+6));
			
			int p1 = data1 ^ data3 ^ data5 ^ data7;
			int p2 = data2 ^ data3 ^ data6 ^ data7;
			int p4 = data4 ^ data5 ^ data6 ^ data7;
			
			String check = "" + p4 + "" + p2 + "" + p1;
			
			int bitError = Integer.parseInt(check, 2);
			
			StringBuffer correct = new StringBuffer();
			correct.append(data1);
			correct.append(data2);
			correct.append(data3);
			correct.append(data4);
			correct.append(data5);
			correct.append(data6);
			correct.append(data7);
			
			
			if(bitError != 0) {
				if(in.charAt(i+bitError-1) == '0') {
					
				}
			}
			
			out.append(correct);
		}
		
		System.out.println("Ocorreram " + errors + " erros");
		return null;
	}
	
	public static void main(String[] args) {
		
		String original = read(args[0]);
		
		String hammingDecoded = hammingDecode(original);
		
		List<String> unappended = LZW.unappend(hammingDecoded);
		
		List<Integer> decoded = LZW.decode(unappended);
		
		String decompressed = LZW.decompress(decoded);
		
		System.out.println(decompressed);
	}
}
