import java.util.Random;

public class JogInteli{
	
	Jogadores O;
	int jogada;
	HashTable table = ProjectGalo.table;
	

	public JogInteli(){
	}
	//prepara-se para um novo jogo, i.e. prepara-se para registar os tabuleiros do jogo que se vai iniciar
	//deve ser chamado quando um novo jogo vai comecar
	//deve registar qual o jogador que JogInteli (X ou O)
	public void novoJogo(int jogador){
		O = new Jogadores(jogador, "O");
	}

	//faz uma jogada baseada na experiencia passada, devendo ser escolhido o movimento com maior % de ganhos
	//#ganhou/(#ganhou+#perdeu+#empatou), em caso de empate decida-se aleatoriamnte
	public void joga(JogoDoGalo t){
		if (table.isEmpty()) {
			Random generator = new Random();
			int n1 = generator.nextInt(3);
			int n2 = generator.nextInt(3);
			while (!t.joga(n1, n2) && !t.acabou()) {
				n1 = generator.nextInt(3);
				n2 = generator.nextInt(3);
			}
			t.jogoDoGalo[n1][n2]=O;
		}else {
			double maior=0.0;
			Jogadas melhor;
			for (int i=0;i<table.capacity();i++) {
				Jogadas j = (Jogadas) table.table[i].getValue();
				if (j.winRate()>maior) {
					maior=j.winRate();
					melhor=j;
				}
			}
			
		}
	}
	//dado que terminal uma configuracao em que o jogo acabou as configuracoes que constituem todas as
	//Jogadores do jogo devem ser registadas como respondentes a voitoria, empate ou derrota
	public void acabou(JogoDoGalo terminal){
	}

	// numero de vezes que a configuracao t foi vista
	public int numeroDeVezesVisto(JogoDoGalo t){
		return 0;
	}
	// retorna todas as configuracoes que foram Jogadores apos a configuracao t
	public JogoDoGalo[] sucessores(JogoDoGalo t){
		return new JogoDoGalo[4];
	}

}