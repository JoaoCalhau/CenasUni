public class JogInteli{
	
	Jogadas O;
	HashTable table = ProjectGalo.table;
	int wins, draws, losses;

	public JogInteli(){
		O = new Jogadas(2, "O");
		this.wins=0;
		this.draws=0;
		this.losses=0;
	}
	//prepara-se para um novo jogo, i.e. prepara-se para registar os tabuleiros do jogo que se vai iniciar
	//deve ser chamado quando um novo jogo vai comecar
	//deve registar qual o jogador que JogInteli (X ou O)
	public void novoJogo(int jogador){
	}

	//faz uma jogada baseada na experiencia passada, devendo ser escolhido o movimento com maior % de ganhos
	//#ganhou/(#ganhou+#perdeu+#empatou), em caso de empate decida-se aleatoriamnte
	public void joga(JogoDoGalo t){
		/*int maior=0;
		for(int i=0;i<table.capacity();i++) {
			Inputs input = (Inputs) table.table[i].getValue();
			if (input.getItem().) {
				
			}
		}*/
	}
	//dado que terminal uma configuracao em que o jogo acabou as configuracoes que constituem todas as
	//jogadas do jogo devem ser registadas como respondentes a voitoria, empate ou derrota
	public void acabou(JogoDoGalo terminal){
		if (terminal.vencedor()==1) {
			this.losses++;
		}else if(terminal.vencedor()==2) {
			this.wins++;
		}else {
			this.draws++;
		}
	}

	// numero de vezes que a configuracao t foi vista
	public int numeroDeVezesVisto(JogoDoGalo t){
		Inputs input = (Inputs) table.get(Builder(t.hashcode()));
		return input.getNum();
	}
	// retorna todas as configuracoes que foram jogadas apos a configuracao t
	public JogoDoGalo[] sucessores(JogoDoGalo t){
		return new JogoDoGalo[4];
	}
	
	public String Builder(int n) {
		StringBuilder sb = new StringBuilder();
		sb.append("");
		sb.append(n);
		String s = sb.toString();
		return s;
	}
}